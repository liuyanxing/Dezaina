#pragma once

#include <string>
#include <vector>

#include "desaina_kiwi.h"

using  uint = uint32_t;
using string = std::string;

{{#classes}}
class {{name}};
{{/classes}}

{{#enums}}
enum class {{name}} {
{{#members}}
	{{name}},
{{/members}}
};
{{/enums}}

{{#structs}}
struct {{name}} {
{{#members}}
	{{&type}} {{name}}{{#defaultValue}} = {{defaultValue}}{{/defaultValue}};
{{/members}}
void applyChange(const Desaina_Kiwi::{{kiwiChangeType}}& change) {
{{#members}}
	if (change.{{name}}() != nullptr) {
	{{#isEnum}}
		{{name}} = static_cast<{{type}}>(*change.{{name}}());
	{{/isEnum}}
	{{#isString}}
		{{name}} = *change.{{name}}()->c_str();
	{{/isString}}	
	{{#isBasicType}}
		{{name}} = *change.{{name}}();
	{{/isBasicType}}	
	{{#isComplexType}}
		{{name}}.applyChange(*change.{{name}}());
	{{/isComplexType}}	
	}
{{/members}}
}
};
{{/structs}}

{{#classes}}
class {{name}} {{#mixins}}: {{.}}{{/mixins}} {
private:
{{#members}}
{{^isFunction}}
	{{&type}} {{name}}{{#defaultValue}} = {{defaultValue}}{{/defaultValue}};
{{/isFunction}}
{{/members}}

public:
{{#members}}
{{^isFunction}}
	{{&type}}& get_{{name}}() {
		return {{name}};
	};
	void set_{{name}} (const {{&type}}& value) {
		{{name}} = value;
	};
{{/isFunction}}
{{#isFunction}}
	{{defaultValue}}
{{/isFunction}}
{{/members}}

{{#kiwiChangeType}}
void applyChange(const Desaina_Kiwi::{{kiwiChangeType}}& change) {
{{#members}}
{{^isFunction}}
	if (change.{{name}}() != nullptr) {
{{^isArray}}
	{{#isEnum}}
		{{name}} = static_cast<{{type}}>(*change.{{name}}());
	{{/isEnum}}
	{{#isString}}
		{{name}} = *change.{{name}}()->c_str();
	{{/isString}}	
	{{#isBasicType}}
		{{name}} = *change.{{name}}();
	{{/isBasicType}}	
	{{#isComplexType}}
		{{name}}.applyChange(*change.{{name}}());
	{{/isComplexType}}	
{{/isArray}}
{{#isArray}}
	{{name}}.clear();
	for (auto& item : *change.{{name}}()) {
	{{#isEnum}}
		{{name}}.push_back(static_cast<{{type}}>(item));
	{{/isEnum}}
	{{#isString}}
		{{name}}.push_back(*item->c_str());
	{{/isString}}	
	{{#isBasicType}}
		{{name}}.push_back(item);
	{{/isBasicType}}	
	{{#isComplexType}}
		{{name}}.push_back({{typeInArray}}());
		{{name}}.back().applyChange(item);
	{{/isComplexType}}	
	}
{{/isArray}}
  }
{{/isFunction}}
{{/members}}
}
{{/kiwiChangeType}}

};
{{/classes}}
