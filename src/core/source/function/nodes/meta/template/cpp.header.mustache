#pragma once

#include <string>
#include <vector>
#include <variant>

using  uint = uint32_t;
using string = std::string;

#include "base/buffer.h"
#include "change/change_type.h"

{{#classes}}
class {{name}};
{{/classes}}

{{#enums}}
enum class {{name}} {
{{#members}}
	{{name}},
{{/members}}
};
{{/enums}}

{{#structs}}
struct {{name}} {
{{#propsMembers}}
	{{&type}} {{name}}{{#defaultValue}} = {{defaultValue}}{{/defaultValue}};
{{/propsMembers}}
void applyChange(const Desaina_Kiwi::{{kiwiChangeType}}& change) {
{{#propsMembers}}
	if (change.{{name}}() != nullptr) {
    applyChangeImpl({{name}}, *change.{{name}}());
	}
{{/propsMembers}}
}

void toChange(Desaina_Kiwi::{{kiwiChangeType}}& change, kiwi::MemoryPool& pool) const {
{{#propsMembers}}
  toChangeImpl(&change, &Desaina_Kiwi::{{kiwiChangeType}}::set_{{name}}, {{name}}, pool);
{{/propsMembers}}
}

auto* toChange(kiwi::MemoryPool& pool) const {
  auto* change = pool.allocate<Desaina_Kiwi::{{kiwiChangeType}}>();
{{#propsMembers}}
  toChange(*change, pool);
{{/propsMembers}}
  return change;
}

};
{{/structs}}

{{#customTypes}}
{{&.}}
{{/customTypes}}

{{#classes}}
class {{name}} {{#extends}}: {{.}}{{/extends}} {
private:
{{#propsMembers}}
	{{&type}} {{name}}{{#defaultValue}} = {{defaultValue}}{{/defaultValue}};
{{/propsMembers}}

public:
{{#propsMembers}}
	const {{&type}}& get_{{name}}() const {
		return {{name}};
	};
	void set_{{name}} (const {{&type}}& val) {
		{{name}} = val;
	};
{{/propsMembers}}
{{#funcMembers}}
	{{&defaultValue}}
{{/funcMembers}}

{{#kiwiChangeType}}
void applyChange(const Desaina_Kiwi::{{kiwiChangeType}}& change) {
{{#propsMembers}}
	if (change.{{name}}() != nullptr) {
    applyChangeImpl({{name}}, *change.{{name}}());
  }
{{/propsMembers}}
{{#kiwiMixins}}
	{{.}}::applyChange(change);
{{/kiwiMixins}}
}

void toChange(Desaina_Kiwi::{{kiwiChangeType}}& change, kiwi::MemoryPool& pool) {
}

{{/kiwiChangeType}}
};
{{/classes}}

{{#applyChanges}}
{{&.}}
{{/applyChanges}}

{{#toChanges}}
{{&.}}
{{/toChanges}}
