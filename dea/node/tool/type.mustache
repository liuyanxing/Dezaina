#pragma once

#include "node.h"
#include <string>
#include <type_traits>

namespace dea::node
{

{{#nodes}}
class {{node}};
{{/nodes}}

template<typename T>
T node_cast(const Node* node) {
	if (node == nullptr) {
		return nullptr;
	}

	using U = std::remove_cv_t<std::remove_pointer_t<T>>;
{{#nodes}}
	if (node->getType() == NodeType::{{nodeType}}{{#alias}} || node->getType() == NodeType::{{.}}{{/alias}}) {
		if constexpr (std::is_convertible_v<{{node}}, U>) {
			return static_cast<T>(({{node}}*)(node));
		}
	}
{{/nodes}}
	return nullptr;
}

inline std::string getNodeTypeString(const Node* node) {
	if (node == nullptr) {
		return std::string("Null");
	}

{{#nodes}}
	if (node->getType() == NodeType::{{nodeType}}{{#alias}} || node->getType() == NodeType::{{.}}{{/alias}}) {
		return std::string("{{nodeType}}");
	}
{{/nodes}}
	return std::string("Unknown");
}

} // namespace dea::node