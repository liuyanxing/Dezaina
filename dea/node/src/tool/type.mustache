#pragma once

#include "node.h"
#include <type_traits>

namespace dea::node
{

{{#nodes}}
class {{node}};
{{/nodes}}

template<typename T>
T node_cast(Node* node) {
	using U = std::remove_cv_t<std::remove_pointer_t<T>>;
{{#nodes}}
	if (node->getType() == NodeType::{{nodeType}}) {
		if constexpr (std::is_convertible_v<{{node}}, U>) {
			return static_cast<T>(({{node}}*)(node));
		}
	}
{{/nodes}}
	return nullptr;
}

} // namespace dea::node